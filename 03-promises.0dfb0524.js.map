{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAWC,SAASC,cAAc,yBAClCC,EAAUF,SAASC,cAAc,SAoCvC,SAASE,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,MAEpBA,MA7CPH,EAAQW,iBAAiB,UAEzB,SAAuBC,GACrBA,EAAEC,iBAEFhB,EAASiB,UAAW,EACpB,MACEC,UAAYZ,MAAAa,EAAKC,KAAEA,EAAIC,OAAEA,IACvBN,EAAEO,cACN,IAAIC,EAAUC,OAAOL,EAAMM,OACvBC,EAASF,OAAOJ,EAAKK,OACrBE,EAAWH,OAAOH,EAAOI,OAEzBG,EAAaL,EAAUG,EAASC,EAEpC,GAAIJ,EAAU,GAAKG,EAAS,GAAKC,EAAW,EAE1C,YADA7B,EAAA+B,OAAOC,QAAQ,OAIjB,IAAK,IAAIC,EAAW,EAAGA,GAAYJ,EAAUI,GAAY,EACvD3B,EAAc2B,EAAUR,GACrBS,MAAK,EAAC3B,SAAEA,EAAQC,MAAEA,KACjBR,EAAA+B,OAAOI,QAAQ,uBAAqB5B,QAAiBC,SAAY4B,OAElE,EAAO7B,WAAUC,WAChBR,EAAA+B,OAAMC,QAAC,sBAASzB,QAA8BC,SAGlDiB,GAAWG,EAEbvB,EAAQgC,QAkBQC,EAjBPR,EAkBTf,YAAW,KACTb,EAASiB,UAAW,IACnBmB,GAHL,IAAkBA","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst startBtn = document.querySelector('button[type=\"submit\"]');\nconst formRef = document.querySelector('.form');\nformRef.addEventListener('submit', onFormaSubmit);\n\nfunction onFormaSubmit(e) {\n  e.preventDefault();\n\n  startBtn.disabled = true;\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n  let delayEl = Number(delay.value);\n  let stepEl = Number(step.value);\n  let amountEl = Number(amount.value);\n\n  let totalDelay = delayEl + stepEl * amountEl;\n\n  if (delayEl < 0 || stepEl < 0 || amountEl < 0) {\n    Notify.failure('WTF');\n    return;\n  }\n\n  for (let position = 1; position <= amountEl; position += 1) {\n    createPromise(position, delayEl)\n      .then(({ position, delay }) =>\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)\n      )\n      .catch(({ position, delay }) =>\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n      );\n\n    delayEl += stepEl;\n  }\n  formRef.reset();\n  onOffBtn(totalDelay);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((Fulfill, Reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        Fulfill({ position, delay });\n      } else {\n        Reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onOffBtn(total) {\n  setTimeout(() => {\n    startBtn.disabled = false;\n  }, total);\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$startBtn","document","querySelector","$47d4ff9957288465$var$formRef","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","Fulfill","Reject","setTimeout","addEventListener","e","preventDefault","disabled","elements","delay1","step","amount","currentTarget","delayEl","Number","value","stepEl","amountEl","totalDelay","Notify","failure","position1","then","success","catch","reset","total"],"version":3,"file":"03-promises.0dfb0524.js.map"}